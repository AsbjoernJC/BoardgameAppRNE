{"ast":null,"code":"\n\nexport default function getEventManager(target) {\n  var listeners = {};\n\n  var removeListener = function removeListener(type, callback) {\n    var callbacks = listeners[type] ? listeners[type][target] : undefined;\n    if (!callbacks) {\n      return;\n    }\n    var index = callbacks.indexOf(callback);\n    callbacks.splice(index, 1);\n  };\n\n  var addListener = function addListener(type, callback) {\n    listeners[type] = listeners[type] || {};\n    listeners[type][target] = listeners[type][target] || [];\n    listeners[type][target].push(callback);\n    return {\n      remove: function remove() {\n        return removeListener(type, callback);\n      }\n    };\n  };\n  return {\n    addListener: addListener,\n    emit: function emit(type, data) {\n      var items = listeners[type] || {};\n\n      var callbacks = items[target] && items[target].slice();\n      callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach(function (cb) {\n        return cb(data);\n      });\n    }\n  };\n}","map":{"version":3,"sources":["getEventManager.js"],"names":["getEventManager","target","listeners","removeListener","type","callback","callbacks","undefined","index","indexOf","splice","addListener","push","remove","emit","data","items","slice","forEach","cb"],"mappings":";;AAKA,eAAe,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;EAI9C,IAAMC,SAAS,GAAG,CAAA,CAAlB;;EAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAD,EAAOC,QAAP,EAAoB;IACzC,IAAMC,SAAS,GAAGJ,SAAS,CAACE,IAAD,CAATF,GAAkBA,SAAS,CAACE,IAAD,CAATF,CAAgBD,MAAhBC,CAAlBA,GAA4CK,SAA9D;IAEA,IAAI,CAACD,SAAL,EAAgB;MACd;IACD;IAED,IAAME,KAAK,GAAGF,SAAS,CAACG,OAAVH,CAAkBD,QAAlBC,CAAd;IAEAA,SAAS,CAACI,MAAVJ,CAAiBE,KAAjBF,EAAwB,CAAxBA,CAAAA;EACD,CAVD;;EAgBA,IAAMK,WAAW,GAAG,SAAdA,WAAW,CAAIP,IAAD,EAAOC,QAAP,EAAoB;IACtCH,SAAS,CAACE,IAAD,CAATF,GAAkBA,SAAS,CAACE,IAAD,CAATF,IAAmB,CAAA,CAArCA;IACAA,SAAS,CAACE,IAAD,CAATF,CAAgBD,MAAhBC,CAAAA,GAA0BA,SAAS,CAACE,IAAD,CAATF,CAAgBD,MAAhBC,CAAAA,IAA2B,EAArDA;IACAA,SAAS,CAACE,IAAD,CAATF,CAAgBD,MAAhBC,CAAAA,CAAwBU,IAAxBV,CAA6BG,QAA7BH,CAAAA;IAEA,OAAO;MACLW,MAAM,EAAE;QAAA,OAAMV,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAA;MAAA;IADvB,CAAP;EAGD,CARD;EAUA,OAAO;IACLM,WADK,EACLA,WADK;IAOLG,IAAI,EAAE,cAACV,IAAD,EAAOW,IAAP,EAAgB;MACpB,IAAMC,KAAK,GAAGd,SAAS,CAACE,IAAD,CAATF,IAAmB,CAAA,CAAjC;;MAMA,IAAMI,SAAS,GAAGU,KAAK,CAACf,MAAD,CAALe,IAAiBA,KAAK,CAACf,MAAD,CAALe,CAAcC,KAAdD,EAAnC;MAEAV,SAAS,KAAA,IAATA,IAAAA,SAAS,KAAA,KAAA,CAATA,GAAAA,KAAAA,CAAAA,GAAAA,SAAS,CAAEY,OAAXZ,CAAoBa,UAAAA,EAAD;QAAA,OAAQA,EAAE,CAACJ,IAAD,CAA7BT;MAAAA,EAAAA;IACD;EAjBI,CAAP;AAmBD","sourcesContent":["// @ts-check\n\n/**\n * @param {string} target\n */\nexport default function getEventManager(target) {\n  /**\n   * @type {Record<string, Record<string, ((e: any) => void)[]>>}\n   */\n  const listeners = {};\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const removeListener = (type, callback) => {\n    const callbacks = listeners[type] ? listeners[type][target] : undefined;\n\n    if (!callbacks) {\n      return;\n    }\n\n    const index = callbacks.indexOf(callback);\n\n    callbacks.splice(index, 1);\n  };\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const addListener = (type, callback) => {\n    listeners[type] = listeners[type] || {};\n    listeners[type][target] = listeners[type][target] || [];\n    listeners[type][target].push(callback);\n\n    return {\n      remove: () => removeListener(type, callback),\n    };\n  };\n\n  return {\n    addListener,\n\n    /**\n     * @param {string} type\n     * @param {any} [data]\n     */\n    emit: (type, data) => {\n      const items = listeners[type] || {};\n\n      /**\n       * Copy the current list of callbacks in case they are mutated during execution\n       * @type {((data: any) => void)[] | undefined}\n       */\n      const callbacks = items[target] && items[target].slice();\n\n      callbacks?.forEach((cb) => cb(data));\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}