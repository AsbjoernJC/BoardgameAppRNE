{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\", \"theme\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nimport * as React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nvar urlToPathAndParams = pathUtils.urlToPathAndParams;\nfunction isStateful(props) {\n  return !props.navigation;\n}\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n\n  var navigation = props.navigation,\n    screenProps = props.screenProps,\n    persistNavigationState = props.persistNavigationState,\n    loadNavigationState = props.loadNavigationState,\n    theme = props.theme,\n    containerProps = _objectWithoutProperties(props, _excluded);\n\n  var keys = Object.keys(containerProps);\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\nvar _reactNavigationIsHydratingState = false;\n\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    _inherits(NavigationContainer, _React$Component);\n    var _super = _createSuper(NavigationContainer);\n    function NavigationContainer(props) {\n      var _this;\n      _classCallCheck(this, NavigationContainer);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"subs\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_actionEventSubscribers\", new Set());\n      _defineProperty(_assertThisInitialized(_this), \"_handleOpenURL\", function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n          enableURLHandling = _this$props.enableURLHandling,\n          uriPrefix = _this$props.uriPrefix;\n        if (enableURLHandling === false) {\n          return;\n        }\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n            params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_persistNavigationState\", function () {\n        var _ref2 = _asyncToGenerator(function* (nav) {\n          var persistNavigationState = _this.props.persistNavigationState;\n          if (persistNavigationState) {\n            try {\n              yield persistNavigationState(nav);\n            } catch (err) {\n              console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n            }\n          }\n        });\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      _defineProperty(_assertThisInitialized(_this), \"dispatch\", function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n            dispatchActionEvents();\n            _this._persistNavigationState(navState);\n          });\n          return true;\n        }\n        dispatchActionEvents();\n        return false;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getScreenProps\", function () {\n        return _this.props.screenProps;\n      });\n      _defineProperty(_assertThisInitialized(_this), \"_getTheme\", function () {\n        if (_this.props.theme === 'light' || _this.props.theme === 'dark') {\n          return _this.props.theme;\n        } else if (_this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \".concat(_this.props.theme, \". Only 'light' and 'dark' are supported. Falling back to 'light'\"));\n          return 'light';\n        }\n      });\n      validateProps(props);\n      _this._initialAction = NavigationActions.init();\n      if (_this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n    _createClass(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n          return;\n        }\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = _asyncToGenerator(function* () {\n          var _this2 = this;\n          this._isMounted = true;\n          if (!this._isStateful()) {\n            return;\n          }\n          if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n            if (_statefulContainerCount > 0) {\n              if (Platform.OS === 'ios') {\n                console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n              }\n            }\n          }\n          _statefulContainerCount++;\n          this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n          var parsedUrl = null;\n          var userProvidedStartupState = null;\n          if (this.props.enableURLHandling !== false) {\n            var _yield$this$getStartu = yield this.getStartupParams();\n            parsedUrl = _yield$this$getStartu.parsedUrl;\n            userProvidedStartupState = _yield$this$getStartu.userProvidedStartupState;\n          }\n\n          var action = this._initialAction;\n\n          var startupState = this.state.nav;\n          if (!startupState && !userProvidedStartupState) {\n            !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n            startupState = Component.router.getStateForAction(action);\n          }\n\n          if (userProvidedStartupState) {\n            startupState = userProvidedStartupState;\n            _reactNavigationIsHydratingState = true;\n          }\n\n          if (parsedUrl) {\n            var _parsedUrl = parsedUrl,\n              path = _parsedUrl.path,\n              params = _parsedUrl.params;\n            var urlAction = Component.router.getActionForPathAndParams(path, params);\n            if (urlAction) {\n              !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n              action = urlAction;\n              startupState = Component.router.getStateForAction(urlAction, startupState);\n            }\n          }\n          var dispatchActions = function dispatchActions() {\n            return _this2._actionEventSubscribers.forEach(function (subscriber) {\n              return subscriber({\n                type: 'action',\n                action: action,\n                state: _this2.state.nav,\n                lastState: null\n              });\n            });\n          };\n          if (startupState === this.state.nav) {\n            dispatchActions();\n            return;\n          }\n\n          this.setState({\n            nav: startupState\n          }, function () {\n            _reactNavigationIsHydratingState = false;\n            dispatchActions();\n          });\n        });\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n        return componentDidMount;\n      }()\n    }, {\n      key: \"getStartupParams\",\n      value: function () {\n        var _getStartupParams = _asyncToGenerator(function* () {\n          var _this$props2 = this.props,\n            uriPrefix = _this$props2.uriPrefix,\n            loadNavigationState = _this$props2.loadNavigationState;\n          var url, loadedNavState;\n          try {\n            var _yield$Promise$all = yield Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n            var _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            url = _yield$Promise$all2[0];\n            loadedNavState = _yield$Promise$all2[1];\n          } catch (err) {\n          }\n          return {\n            parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n            userProvidedStartupState: loadedNavState\n          };\n        });\n        function getStartupParams() {\n          return _getStartupParams.apply(this, arguments);\n        }\n        return getStartupParams;\n      }()\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$_linkingSub;\n        this._isMounted = false;\n\n        if ((_this$_linkingSub = this._linkingSub) === null || _this$_linkingSub === void 0 ? void 0 : _this$_linkingSub.remove) {\n          var _this$_linkingSub2;\n          (_this$_linkingSub2 = this._linkingSub) === null || _this$_linkingSub2 === void 0 ? void 0 : _this$_linkingSub2.remove();\n        } else {\n          Linking.removeEventListener('url', this._handleOpenURL);\n        }\n        this.subs && this.subs.remove();\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value:\n\n      function render() {\n        var _this3 = this;\n        var navigation = this.props.navigation;\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n          if (!navState) {\n            return this._renderLoading();\n          }\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n          navigation = this._navigation;\n        }\n        invariant(navigation, 'failed to get navigation');\n        return React.createElement(ThemeProvider, {\n          value: this._getTheme()\n        }, React.createElement(NavigationProvider, {\n          value: navigation\n        }, React.createElement(Component, _extends({}, this.props, {\n          navigation: navigation\n        }))));\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n    return NavigationContainer;\n  }(React.Component);\n  _defineProperty(NavigationContainer, \"router\", Component.router);\n  _defineProperty(NavigationContainer, \"navigationOptions\", null);\n  _defineProperty(NavigationContainer, \"defaultProps\", {\n    theme: 'light'\n  });\n  return NavigationContainer;\n}","map":{"version":3,"sources":["createAppContainer.js"],"names":["React","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","router","nextProps","Set","constructor","_initialAction","init","_isStateful","BackHandler","addEventListener","subs","_isMounted","remove","dispatch","back","state","nav","getStateForAction","_renderLoading","renderLoadingExperimental","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","getActionForPathAndParams","_onNavigationStateChange","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","lastState","componentDidUpdate","_navState","NODE_ENV","detached","Platform","OS","_linkingSub","Linking","_handleOpenURL","userProvidedStartupState","getStartupParams","startupState","urlAction","dispatchActions","_actionEventSubscribers","forEach","subscriber","type","setState","loadedNavState","Promise","all","getInitialURL","err","componentDidCatch","e","componentWillUnmount","removeEventListener","lastNavState","reducedState","navState","dispatchActionEvents","_persistNavigationState","render","_navigation","_getScreenProps","_getTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAEA,SACEC,iBADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,aAJF,EAKEC,kBALF,QAMO,wBANP;AAOA,OAAOC,SAAP;AACA,OAAOC,OAAP;AAEA,IAAQC,kBAAAA,GAAuBL,SAA/B,CAAQK,kBAAAA;AAER,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACzB,OAAO,CAACA,KAAK,CAACC,UAAd;AACD;AAED,SAASC,aAAT,CAAuBF,KAAvB,EAA8B;EAC5B,IAAIA,KAAK,CAACG,cAAV,EAA0B;IACxBC,OAAO,CAACC,IAARD,CACE,iDAAA,GACE,iFADF,GAEE,yEAFF,GAGE,6CAJJA,CAAAA;EAMD;EACD,IAAIL,UAAU,CAACC,KAAD,CAAd,EAAuB;IACrB;EACD;;EAED,IACEC,UADI,GAOFD,KAPJ,CACEC,UADI;IAEJK,WAFI,GAOFN,KAPJ,CAEEM,WAFI;IAGJC,sBAHI,GAOFP,KAPJ,CAGEO,sBAHI;IAIJC,mBAJI,GAOFR,KAPJ,CAIEQ,mBAJI;IAKJC,KALI,GAOFT,KAPJ,CAKES,KALI;IAMDC,cAAAA,4BACDV,KAPJ;;EAUA,IAAMW,IAAI,GAAGC,MAAM,CAACD,IAAPC,CAAYF,cAAZE,CAAb;EAEA,IAAID,IAAI,CAACE,MAALF,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIG,KAAJ,CACJ,mEAAA,GAAA,0DAAA,CAAA,MAAA,CAC4DH,IAAI,CAACI,IAALJ,CACxD,IADwDA,CAD5D,EAAA,KAAA,CAAA,GAIE,yEAJF,GAKE,yEANE,CAAN;EAQD;EACDf,SAAS,CACNW,sBAAsB,KAAKS,SAA3BT,IACCC,mBAAmB,KAAKQ,SAD1B,IAEG,OAAOT,sBAAP,KAAkC,UAAlC,IACC,OAAOC,mBAAP,KAA+B,UAJ5B,EAKP,+FALO,CAATZ;AAOD;;AAMD,IAAIqB,uBAAuB,GAAG,CAA9B;AACA,OAAO,SAASC,mCAAT,GAA+C;EACpDD,uBAAuB,GAAG,CAA1BA;AACD;;AAID,IAAIE,gCAAgC,GAAG,KAAvC;;AAYA,eAAe,SAASC,yBAAT,CAAmCC,SAAnC,EAA8C;EAAA,IACrDC,mBAAN;IAAA;IAAA;IAiBEI,6BAAY1B,KAAD,EAAQ;MAAA;MAAA;MACjB,0BAAMA,KAAN;MADiB,eAAA,gCAAA,MAAA,EAhBZ,IAgBY,CAAA;MAAA,eAAA,gCAAA,yBAAA,EAFO,IAAIyB,GAAJ,EAEP,CAAA;MAAA,eAAA,gCAAA,gBAAA,EA0CF,gBAAa;QAAA,IAAViB,GAAAA,QAAAA,GAAAA;QAClB,kBAAyC,MAAK1C,KAA9C;UAAQ2C,iBAAF,eAAEA,iBAAF;UAAqBC,SAAAA,eAAAA,SAAAA;QAC3B,IAAID,iBAAiB,KAAK,KAA1B,EAAiC;UAC/B;QACD;QACD,IAAME,SAAS,GAAG/C,kBAAkB,CAAC4C,GAAD,EAAME,SAAN,CAApC;QACA,IAAIC,SAAJ,EAAe;UACb,IAAQC,IAAF,GAAmBD,SAAzB,CAAQC,IAAF;YAAQC,MAAAA,GAAWF,SAAzB,CAAcE,MAAAA;UACd,IAAMC,MAAM,GAAG3B,SAAS,CAACE,MAAVF,CAAiB4B,yBAAjB5B,CAA2CyB,IAA3CzB,EAAiD0B,MAAjD1B,CAAf;UACA,IAAI2B,MAAJ,EAAY;YACV,MAAKb,QAAL,CAAca,MAAd,CAAA;UACD;QACF;MACF,CAvDkB,CAAA;MAAA,eAAA,gCAAA,yBAAA;QAAA,8BAqNO,WAAOV,GAAP,EAAe;UACvC,IAAQ/B,sBAAAA,GAA2B,MAAKP,KAAxC,CAAQO,sBAAAA;UACR,IAAIA,sBAAJ,EAA4B;YAC1B,IAAI;cACF,MAAMA,sBAAsB,CAAC+B,GAAD,CAA5B;YACD,CAFD,CAEE,OAAO8C,GAAP,EAAY;cACZhF,OAAO,CAACC,IAARD,CACE,+KADFA,CAAAA;YAGD;UACF;QACF,CAhOkB;QAAA;UAAA;QAAA;MAAA,IAAA;MAAA,eAAA,gCAAA,UAAA,EAqPP4C,UAAAA,MAAD,EAAY;QACrB,IAAI,MAAKhD,KAAL,CAAWC,UAAf,EAA2B;UACzB,OAAO,MAAKD,KAAL,CAAWC,UAAX,CAAsBkC,QAAtB,CAA+Ba,MAA/B,CAAP;QAFmB;;QAMrB,MAAKc,SAAL,GAAiB,MAAKA,SAAL,IAAkB,MAAKzB,KAAL,CAAWC,GAA9C;QACA,IAAMmD,YAAY,GAAG,MAAK3B,SAA1B;QACAlE,SAAS,CAAC6F,YAAD,EAAe,0CAAf,CAAT7F;QACA,IAAM8F,YAAY,GAAGrE,SAAS,CAACE,MAAVF,CAAiBkB,iBAAjBlB,CACnB2B,MADmB3B,EAEnBoE,YAFmBpE,CAArB;QAIA,IAAMsE,QAAQ,GAAGD,YAAY,KAAK,IAAjBA,GAAwBD,YAAxBC,GAAuCA,YAAxD;QAEA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAoB,GAAS;UACjC,MAAKjB,uBAAL,CAA6BC,OAA7B,CAAsCC,UAAAA,UAAD;YAAA,OACnCA,UAAU,CAAC;cACTC,IAAI,EAAE,QADG;cAET9B,MAFS,EAETA,MAFS;cAGTX,KAAK,EAAEsD,QAHE;cAIT/B,SAAS,EAAE6B;YAJF,CAAD,CADZ;UAAA,EAAA;QAQD,CATD;QAWA,IAAIC,YAAY,KAAK,IAArB,EAA2B;UAGzBE,oBAAoB,EAAA;UACpB,OAAO,IAAP;QACD;QAED,IAAID,QAAQ,KAAKF,YAAjB,EAA+B;UAE7B,MAAK3B,SAAL,GAAiB6B,QAAjB;UACA,MAAKZ,QAAL,CAAc;YAAEzC,GAAG,EAAEqD;UAAP,CAAd,EAAiC,YAAM;YACrC,MAAKzC,wBAAL,CAA8BuC,YAA9B,EAA4CE,QAA5C,EAAsD3C,MAAtD,CAAA;YACA4C,oBAAoB,EAAA;YACpB,MAAKC,uBAAL,CAA6BF,QAA7B,CAAA;UACD,CAJD,CAAA;UAKA,OAAO,IAAP;QACD;QAEDC,oBAAoB,EAAA;QACpB,OAAO,KAAP;MACD,CAnSkB,CAAA;MAAA,eAAA,gCAAA,iBAAA,EAqSD;QAAA,OAAM,MAAK5F,KAAL,CAAWM,WArShB;MAAA,EAAA;MAAA,eAAA,gCAAA,WAAA,EAuSP,YAAM;QAChB,IAAI,MAAKN,KAAL,CAAWS,KAAX,KAAqB,OAArB,IAAgC,MAAKT,KAAL,CAAWS,KAAX,KAAqB,MAAzD,EAAiE;UAC/D,OAAO,MAAKT,KAAL,CAAWS,KAAlB;QACD,CAFD,MAEO,IAAI,MAAKT,KAAL,CAAWS,KAAX,KAAqB,eAAzB,EAA0C;UAC/C,OAAO,OAAP;QACD,CAFM,MAEA;UACLL,OAAO,CAACC,IAARD,CAAAA,0BAAAA,CAAAA,MAAAA,CAC6B,MAAKJ,KAAL,CAAWS,KADxCL,EAAAA,kEAAAA,CAAAA,CAAAA;UAGA,OAAO,OAAP;QACD;MACF,CAlTkB,CAAA;MAGjBF,aAAa,CAACF,KAAD,CAAbE;MAEA,MAAKyB,cAAL,GAAsBpC,iBAAiB,CAACqC,IAAlBrC,EAAtB;MAEA,IACE,MAAKsC,WAAL,EAAA,IACAC,WADA,IAEA,OAAOA,WAAW,CAACC,gBAAnB,KAAwC,UAH1C,EAIE;QACA,MAAKC,IAAL,GAAY,WAAW,CAACD,gBAAZ,CAA6B,mBAA7B,EAAkD,YAAM;UAClE,IAAI,CAAC,MAAKE,UAAV,EAAsB;YACpB,MAAKD,IAAL,IAAa,MAAKA,IAAL,CAAUE,MAAV,EAAb;UACD,CAFD,MAEO;YAIL,OAAO,MAAKC,QAAL,CAAc5C,iBAAiB,CAAC6C,IAAlB7C,EAAd,CAAP;UACD;QACF,CATW,CAAZ;MAUD;MAED,MAAK8C,KAAL,GAAa;QACXC,GAAG,EACD,MAAKT,WAAL,EAAA,IAAsB,CAAC7B,KAAK,CAACQ,mBAA7B,GACIa,SAAS,CAACE,MAAVF,CAAiBkB,iBAAjBlB,CAAmC,MAAKM,cAAxCN,CADJ,GAEI;MAJK,CAAb;MAAA;IAMD;IAAA;MAAA;MAAA,OAEDmB,0BAAiB;QACf,OAAO,IAAA,CAAKxC,KAAL,CAAWyC,yBAAX,GACH,IAAA,CAAKzC,KAAL,CAAWyC,yBAAX,EADG,GAEH,IAFJ;MAGD;IAAA;MAAA;MAAA,OAEDZ,uBAAc;QACZ,OAAO9B,UAAU,CAAC,IAAA,CAAKC,KAAN,CAAjB;MACD;IAAA;MAAA;MAAA,OAiBDkD,kCAAyBC,OAAD,EAAUb,GAAV,EAAeU,MAAf,EAAuB;QAC7C,IACE,OAAO,IAAA,CAAKhD,KAAL,CAAWoD,uBAAlB,KAA8C,WAA9C,IACA,IAAA,CAAKvB,WAAL,EADA,IAEA,CAAC,CAACwB,OAAO,CAACC,GAARD,CAAYE,iBAHhB,EAIE;UACA,IAAInD,OAAO,CAACoD,KAAZ,EAAmB;YACjBpD,OAAO,CAACoD,KAARpD,CAAc,uBAAdA,CAAAA;YACAA,OAAO,CAACqD,GAARrD,CAAY,UAAZA,EAAwB4C,MAAxB5C,CAAAA;YACAA,OAAO,CAACqD,GAARrD,CAAY,aAAZA,EAA2BkC,GAA3BlC,CAAAA;YACAA,OAAO,CAACqD,GAARrD,CAAY,cAAZA,EAA4B+C,OAA5B/C,CAAAA;YACAA,OAAO,CAACsD,QAARtD,EAAAA;UACD,CAND,MAMO;YACLA,OAAO,CAACqD,GAARrD,CAAY,uBAAZA,EAAqC;cACnC4C,MADmC,EACnCA,MADmC;cAEnCW,QAAQ,EAAErB,GAFyB;cAGnCsB,SAAS,EAAET;YAHwB,CAArC/C,CAAAA;UAKD;UACD;QACD;QAED,IAAI,OAAO,IAAA,CAAKJ,KAAL,CAAWoD,uBAAlB,KAA8C,UAAlD,EAA8D;UAC5D,IAAA,CAAKpD,KAAL,CAAWoD,uBAAX,CAAmCD,OAAnC,EAA4Cb,GAA5C,EAAiDU,MAAjD,CAAA;QACD;MACF;IAAA;MAAA;MAAA,OAEDa,8BAAqB;QAEnB,IAAI,IAAA,CAAKC,SAAL,KAAmB,IAAA,CAAKzB,KAAL,CAAWC,GAAlC,EAAuC;UACrC,IAAA,CAAKwB,SAAL,GAAiB,IAAjB;QACD;MACF;IAAA;MAAA;MAAA;QAAA,2CAED,aAA0B;UAAA;UACxB,IAAA,CAAK7B,UAAL,GAAkB,IAAlB;UACA,IAAI,CAAC,IAAA,CAAKJ,WAAL,EAAL,EAAyB;YACvB;UACD;UAED,IAAIwB,OAAO,CAACC,GAARD,CAAYU,QAAZV,KAAyB,YAAzBA,IAAyC,CAAC,IAAA,CAAKrD,KAAL,CAAWgE,QAAzD,EAAmE;YACjE,IAAI/C,uBAAuB,GAAG,CAA9B,EAAiC;cAG/B,IAAIgD,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;gBACzB7D,OAAO,CAACC,IAARD,CAAAA,6JAAAA,CAAAA,MAAAA,CACgKP,OAAO,CACnK,mEADmK,CADvKO,CAAAA,CAAAA;cAKD;YACF;UACF;UACDa,uBAAuB,EAAA;UACvB,IAAA,CAAKkD,WAAL,GAAmBC,OAAO,CAACrC,gBAARqC,CAAyB,KAAzBA,EAAgC,IAAA,CAAKC,cAArCD,CApBK;;UAuBxB,IAAIvB,SAAS,GAAG,IAAhB;UACA,IAAIyB,wBAAwB,GAAG,IAA/B;UACA,IAAI,IAAA,CAAKtE,KAAL,CAAW2C,iBAAX,KAAiC,KAArC,EAA4C;YAAA,kCAIhC,IAAA,CAAK4B,gBAAL,EAHV;YACE1B,SADD,yBACCA,SADD;YAECyB,wBAAAA,yBAAAA,wBAAAA;UA5BoB;;UAmCxB,IAAItB,MAAM,GAAG,IAAA,CAAKrB,cAnCM;;UAqCxB,IAAI6C,YAAY,GAAG,IAAA,CAAKnC,KAAL,CAAWC,GAA9B;UACA,IAAI,CAACkC,YAAD,IAAiB,CAACF,wBAAtB,EAAgD;YAC9C,CAAC,CAACjB,OAAO,CAACC,GAARD,CAAYE,iBAAd,IACEnD,OAAO,CAACqD,GAARrD,CAAY,2BAAZA,CADF;YAEAoE,YAAY,GAAGnD,SAAS,CAACE,MAAVF,CAAiBkB,iBAAjBlB,CAAmC2B,MAAnC3B,CAAfmD;UAzCsB;;UA6CxB,IAAIF,wBAAJ,EAA8B;YAC5BE,YAAY,GAAGF,wBAAfE;YACArD,gCAAgC,GAAG,IAAnCA;UA/CsB;;UAmDxB,IAAI0B,SAAJ,EAAe;YACb,iBAAyBA,SAAzB;cAAQC,IAAF,cAAEA,IAAF;cAAQC,MAAAA,cAAAA,MAAAA;YACd,IAAM0B,SAAS,GAAGpD,SAAS,CAACE,MAAVF,CAAiB4B,yBAAjB5B,CAChByB,IADgBzB,EAEhB0B,MAFgB1B,CAAlB;YAIA,IAAIoD,SAAJ,EAAe;cACb,CAAC,CAACpB,OAAO,CAACC,GAARD,CAAYE,iBAAd,IACEnD,OAAO,CAACqD,GAARrD,CACE,6CADFA,EAEEyC,SAFFzC,CADF;cAKA4C,MAAM,GAAGyB,SAATzB;cACAwB,YAAY,GAAGnD,SAAS,CAACE,MAAVF,CAAiBkB,iBAAjBlB,CACboD,SADapD,EAEbmD,YAFanD,CAAfmD;YAID;UACF;UAED,IAAME,eAAe,GAAG,SAAlBA,eAAe;YAAA,OACnB,MAAA,CAAKC,uBAAL,CAA6BC,OAA7B,CAAsCC,UAAAA,UAAD;cAAA,OACnCA,UAAU,CAAC;gBACTC,IAAI,EAAE,QADG;gBAET9B,MAFS,EAETA,MAFS;gBAGTX,KAAK,EAAE,MAAA,CAAKA,KAAL,CAAWC,GAHT;gBAITsB,SAAS,EAAE;cAJF,CAAD,CADZ;YAAA,EADF;UAAA;UAUA,IAAIY,YAAY,KAAK,IAAA,CAAKnC,KAAL,CAAWC,GAAhC,EAAqC;YACnCoC,eAAe,EAAA;YACf;UAnFsB;;UAuFxB,IAAA,CAAKK,QAAL,CAAc;YAAEzC,GAAG,EAAEkC;UAAP,CAAd,EAAqC,YAAM;YACzCrD,gCAAgC,GAAG,KAAnCA;YACAuD,eAAe,EAAA;UAChB,CAHD,CAAA;QAID,CAAA;QAAA;UAAA;QAAA;QAAA;MAAA;IAAA;MAAA;MAAA;QAAA,0CAED,aAAyB;UACvB,mBAA2C,IAAA,CAAK1E,KAAhD;YAAQ4C,SAAF,gBAAEA,SAAF;YAAapC,mBAAAA,gBAAAA,mBAAAA;UACnB,IAAIkC,GAAJ,EAASsC,cAAT;UACA,IAAI;YAAA,+BAC4BC,OAAO,CAACC,GAARD,CAAY,CACxCb,OAAO,CAACe,aAARf,EADwC,EAExC5D,mBAAmB,IAAIA,mBAAmB,EAFF,CAAZyE,CAA9B;YAAA;YAACvC,GAAD;YAAMsC,cAAN;UAID,CALD,CAKE,OAAOI,GAAP,EAAY;UAEb;UACD,OAAO;YACLvC,SAAS,EAAEH,GAAG,IAAI5C,kBAAkB,CAAC4C,GAAD,EAAME,SAAN,CAD/B;YAEL0B,wBAAwB,EAAEU;UAFrB,CAAP;QAID,CAAA;QAAA;UAAA;QAAA;QAAA;MAAA;IAAA;MAAA;MAAA,OAEDK,2BAAkBC,CAAD,EAAI;QACnB,IAAInE,gCAAJ,EAAsC;UACpCA,gCAAgC,GAAG,KAAnCA;UACAf,OAAO,CAACC,IAARD,CACE,gIADFA,CAAAA;UAGA,IAAA,CAAK+B,QAAL,CAAc5C,iBAAiB,CAACqC,IAAlBrC,EAAd,CAAA;QACD,CAND,MAMO;UACL,MAAM+F,CAAN;QACD;MACF;IAAA;MAAA;MAAA,OAeDC,gCAAuB;QAAA,IAAA,iBAAA;QACrB,IAAA,CAAKtD,UAAL,GAAkB,KADG;;QAIrB,IAAA,CAAA,iBAAA,GAAI,IAAA,CAAKkC,WAAT,MAAA,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAI,iBAAA,CAAkBjC,MAAtB,EAA8B;UAAA,IAAA,kBAAA;UAC5B,CAAA,kBAAA,GAAA,IAAA,CAAKiC,WAAL,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAkBjC,MAAlB,EAAA;QACD,CAFD,MAEO;UACLkC,OAAO,CAACoB,mBAARpB,CAA4B,KAA5BA,EAAmC,IAAA,CAAKC,cAAxCD,CAAAA;QACD;QAED,IAAA,CAAKpC,IAAL,IAAa,IAAA,CAAKA,IAAL,CAAUE,MAAV,EAAb;QAEA,IAAI,IAAA,CAAKL,WAAL,EAAJ,EAAwB;UACtBZ,uBAAuB,EAAA;QACxB;MACF;IAlQ+C;MAAA;MAAA;;MAqUhD6E,kBAAS;QAAA;QACP,IAAI7F,UAAU,GAAG,IAAA,CAAKD,KAAL,CAAWC,UAA5B;QACA,IAAI,IAAA,CAAK4B,WAAL,EAAJ,EAAwB;UACtB,IAAM8D,QAAQ,GAAG,IAAA,CAAKtD,KAAL,CAAWC,GAA5B;UACA,IAAI,CAACqD,QAAL,EAAe;YACb,OAAO,IAAA,CAAKnD,cAAL,EAAP;UACD;UACD,IAAI,CAAC,IAAA,CAAKuD,WAAN,IAAqB,IAAA,CAAKA,WAAL,CAAiB1D,KAAjB,KAA2BsD,QAApD,EAA8D;YAC5D,IAAA,CAAKI,WAAL,GAAmBrG,aAAa,CAC9B2B,SAAS,CAACE,MADoB,EAE9BoE,QAF8B,EAG9B,IAAA,CAAKxD,QAHyB,EAI9B,IAAA,CAAKwC,uBAJyB,EAK9B,IAAA,CAAKqB,eALyB,EAM9B;cAAA,OAAM,MAAA,CAAKD,WANmB;YAAA,EAAhC;UAQD;UACD9F,UAAU,GAAG,IAAA,CAAK8F,WAAlB9F;QACD;QACDL,SAAS,CAACK,UAAD,EAAa,0BAAb,CAATL;QAEA,OACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA;UAAe,KAAK,EAAE,IAAA,CAAKqG,SAAL;QAAtB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAA;UAAoB,KAAK,EAAEhG;QAA3B,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAe,IAAA,CAAKD,KAApB,EAAA;UAA2B,UAAU,EAAEC;QAAvC,CAAA,CAAA,CADF,CADF,CADF;MAOD;IAAA;MAAA;MAAA,OAvVD,kCAAgCuB,SAAhC,EAA2C;QACzCtB,aAAa,CAACsB,SAAD,CAAbtB;QACA,OAAO,IAAP;MACD;IAAA;IAAA;EAAA,EAb+BZ,KAAK,CAAC+B,SAAxC;EAD2D,eAAA,CACrDC,mBADqD,EAAA,QAAA,EAIzCD,SAAS,CAACE,MAJ+B,CAAA;EAAA,eAAA,CACrDD,mBADqD,EAAA,mBAAA,EAK9B,IAL8B,CAAA;EAAA,eAAA,CACrDA,mBADqD,EAAA,cAAA,EAOnC;IACpBb,KAAK,EAAE;EADa,CAPmC,CAAA;EAqW3D,OAAOa,mBAAP;AACD","sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"]},"metadata":{},"sourceType":"module"}