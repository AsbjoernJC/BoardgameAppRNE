{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\nvar NavigationEvents = function (_React$Component) {\n  _inherits(NavigationEvents, _React$Component);\n  var _super = _createSuper(NavigationEvents);\n  function NavigationEvents() {\n    var _this;\n    _classCallCheck(this, NavigationEvents);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"getPropListener\", function (eventName) {\n      return _this.props[EventNameToPropName[eventName]];\n    });\n    return _this;\n  }\n  _createClass(NavigationEvents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribeAll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.navigation !== prevProps.navigation) {\n        this.removeAll();\n        this.subscribeAll();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeAll();\n    }\n  }, {\n    key: \"subscribeAll\",\n    value: function subscribeAll() {\n      var _this2 = this;\n      this.subscriptions = {};\n      EventNames.forEach(function (eventName) {\n        _this2.subscriptions[eventName] = _this2.props.navigation.addListener(eventName, function () {\n          var propListener = _this2.getPropListener(eventName);\n          return propListener && propListener.apply(void 0, arguments);\n        });\n      });\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this3 = this;\n      EventNames.forEach(function (eventName) {\n        _this3.subscriptions[eventName].remove();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return NavigationEvents;\n}(React.Component);\nexport default withNavigation(NavigationEvents);","map":{"version":3,"sources":["NavigationEvents.js"],"names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","Component","componentDidMount","subscribeAll","componentDidUpdate","prevProps","props","navigation","removeAll","componentWillUnmount","eventName","subscriptions","forEach","addListener","propListener","getPropListener","remove","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP;AAEA,IAAMC,mBAAmB,GAAG;EAC1BC,SAAS,EAAE,aADe;EAE1BC,QAAQ,EAAE,YAFgB;EAG1BC,QAAQ,EAAE,YAHgB;EAI1BC,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAPD,CAAYN,mBAAZM,CAAnB;AAAA,IAEME,gBAAN;EAAA;EAAA;EAA+C,4BAAA;IAAA;IAAA;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;IAAA,gDAAA,IAAA;IAAA,eAAA,gCAAA,iBAAA,EAmB1BU,UAAAA,SAAD;MAAA,OAAe,MAAKJ,KAAL,CAAWd,mBAAmB,CAACkB,SAAD,CAA9B,CAnBY;IAAA,EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC7CR,6BAAoB;MAIlB,IAAA,CAAKC,YAAL,EAAA;IACD;EAAA;IAAA;IAAA,OAEDC,4BAAmBC,SAAD,EAAY;MAC5B,IAAI,IAAA,CAAKC,KAAL,CAAWC,UAAX,KAA0BF,SAAS,CAACE,UAAxC,EAAoD;QAClD,IAAA,CAAKC,SAAL,EAAA;QACA,IAAA,CAAKL,YAAL,EAAA;MACD;IACF;EAAA;IAAA;IAAA,OAEDM,gCAAuB;MACrB,IAAA,CAAKD,SAAL,EAAA;IACD;EAAA;IAAA;IAAA,OAIDL,wBAAe;MAAA;MACb,IAAA,CAAKQ,aAAL,GAAqB,CAAA,CAArB;MAEAd,UAAU,CAACe,OAAXf,CAAoBa,UAAAA,SAAD,EAAe;QAChC,MAAA,CAAKC,aAAL,CAAmBD,SAAnB,CAAA,GAAgC,MAAA,CAAKJ,KAAL,CAAWC,UAAX,CAAsBM,WAAtB,CAC9BH,SAD8B,EAE9B,YAAa;UACX,IAAMI,YAAY,GAAG,MAAA,CAAKC,eAAL,CAAqBL,SAArB,CAArB;UACA,OAAOI,YAAY,IAAIA,YAAY,yBAAnC;QACD,CAL6B,CAAhC;MAOD,CARDjB,CAAAA;IASD;EAAA;IAAA;IAAA,OAEDW,qBAAY;MAAA;MACVX,UAAU,CAACe,OAAXf,CAAoBa,UAAAA,SAAD,EAAe;QAChC,MAAA,CAAKC,aAAL,CAAmBD,SAAnB,CAAA,CAA8BM,MAA9B,EAAA;MACD,CAFDnB,CAAAA;IAGD;EAAA;IAAA;IAAA,OAEDoB,kBAAS;MACP,OAAO,IAAP;IACD;EAAA;EAAA;AAAA,EA3C4B3B,KAAK,CAACW,SAArC;AA8CA,eAAeV,cAAc,CAACS,gBAAD,CAA7B","sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}